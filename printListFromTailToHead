#include<iostream>
#include<vector>
#include<stack>
using namespace std;

typedef struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
		val(x), next(NULL) {
	    }
 }ListNode;

vector<int> printListFromTailToHead(struct ListNode* head) {
	vector<int> ret;
	stack<int> st;
	if(!head)
		return ret;
	ListNode *p = head;
	while(p)
	{
		st.push(p->val);
		p = p->next;
	}
	while(!st.empty())
	{
		ret.push_back(st.top());
		st.pop();
	}
	return ret;
}

ListNode* init(int a[], int n)
{
	ListNode *head,*p;
	for(int i=0;i<n;i++)
	{
		ListNode *nd = new ListNode(a[i]);
		if(i==0)
			head = p =nd;
		else
		{
			p->next = nd;
			p = nd;
		}
	}
	return head;
}

void print(ListNode *head)
{
	ListNode *p = head;
	while(p)
	{
		cout<<p->val<<" ";
		p = p->next;
	}
	cout<<endl;
}

void print_vector(vector<int>vect)
{
	for(vector<int>::size_type i=0;i!=vect.size();i++)
		cout<<vect[i]<<" ";
	cout<<endl;
}

int main()
{
	int a[]={1,2,3,4,5,6};
	ListNode *head = init(a,6);
	print(head);
	vector<int> vect = printListFromTailToHead(head);
	print_vector(vect);
	return 0;
}
